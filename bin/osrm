#!/usr/bin/env python3

import argparse
from sh import docker, jq, RunningCommand
from os import path, environ
import sys


def compose(*args, env=None, **kwargs) -> RunningCommand:
    proj_dir = path.dirname(path.realpath(__file__))
    cfg_file = path.join(proj_dir, '..', 'assets',
                         'osrm', 'docker-compose.yml')

    _env = environ

    if env:
        _env = env

    if '_out' not in kwargs:
        kwargs['_out'] = sys.stdout

    return docker.compose('-f', cfg_file, *args, _env=env, **kwargs)


def up(args: argparse.Namespace) -> None:
    env = {
        'PLATFORM': 'linux/amd64',
        'OSRM_INSTANCE': args.instance,
        'OSRM_PORT': str(args.port),
    }

    compose('up', 'osrm', '-d', '--wait', env=env)


def run(args: argparse.Namespace) -> None:
    env = {
        'PLATFORM': 'linux/amd64',
        'OSRM_INSTANCE': args.instance,
        'OSRM_PORT': str(args.port),
    }

    compose('run', 'osrm', _tty_in=True, env=env)


def list_instances(args: argparse.Namespace, out=sys.stdout) -> None:
    query = '(.Publishers[] | "[" + .URL + ":" + (.PublishedPort | tostring)) + "] " + (.Image | split("/") | .[-1] | split(":") | .[0])'
    jq('-r', query, _in=compose('ps', '--format', 'json', _out=None), _out=out)


def kill(args: argparse.Namespace) -> None:
    compose('kill', 'osrm')


if __name__ == '__main__':
    parser = argparse.ArgumentParser(prog='osrm')
    subparsers = parser.add_subparsers()

    parser_run = subparsers.add_parser('run')
    parser_run.add_argument('instance')
    parser_run.add_argument('-p', '--port', type=int, default=6942)
    parser_run.set_defaults(func=run)

    parser_run = subparsers.add_parser('up')
    parser_run.add_argument('instance')
    parser_run.add_argument('-p', '--port', type=int, default=6942)
    parser_run.set_defaults(func=up)

    parser_kill = subparsers.add_parser('kill')
    parser_kill.set_defaults(func=kill)

    parser_list = subparsers.add_parser('list')
    parser_list.set_defaults(func=list_instances)

    args = parser.parse_args()
    args.func(args)
